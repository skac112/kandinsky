package com.github.skac112.kandinsky.nodes

import cats.Monad
import com.github.skac112.miro.{Ensemble, Graphic}

/**
 * Subclass of SplitWhile which processes parts of influx by internal node as long as the remaining flux is non-empty.
 * @param monad$M$0
 * @tparam GI
 * @tparam DI
 * @tparam GO
 * @tparam DO
 * @tparam M
 */
abstract class Exploit[GI <: Graphic[DI], DI, GO <: Graphic[DO], DO, M[_]: Monad] extends SplitWhile[GI, DI, GO, DO, M] {
  override def whileCond(influx: Ensemble[GI, DI]) = !influx.isEmpty
  override def filterFun(influx: Ensemble[GI, DI]) = internalNode.filterFun(influx)
}